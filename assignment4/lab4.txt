********************************************************************************
LAB4
********************************************************************************

I first created a directory and then went into the new directory
> mkdir gitroot
> cd gitroot

I then got a copy of the repository of Diffutils and went into the repository
> git clone git://git.savannah.gnu.org/diffutils.git
> cd diffutils

Next I used git log and git tag to put the log and list of tags into txt files
> git log > git-log.txt
> git tag > git-tags.txt

Next I went into the log of commits to search fot the commit that starts with
"quote 'like this'" by using git log and /quote 'like this'
> git log
> /quote 'like this'

The commit hashcode was very long so I copied it by using right click and then
used git show to create a patch file
> git show 62ca21c8c1a5aa3488589dcd191a4ef04ae9ed4f > quote-patch.txt

To check out version 3.0 of diffutils, I used the git checkout
> git checkout v3.0

To patch version 3.0, I used the following command
> patch -p1 < quote-patch.txt
Because p1 stips the first prefix, some files were not found. I skipped over
those by pressing  <enter>

Used git status to see the overview of what happened
> git status
This showed a list of modified files and then a list of untracked files

Under the list of all of the modified files, I used emacs to go into every one
of the files that are not - .c files and used vc-diff and vc-revert to revert
all changes to the files
> c-x v = c-x v u

Next I went into every modified .c file to undo all the changes that are not
changes to character string constants. To do this, once I opened up a file using
emacs, I used vc-diff (c-x v =) to see the changes. I then used M-n and M-p to
navigate between hunks or groups of changes in a patch. Once I navigated to a
hunk that I want to undo, I pressed c-u c-c c-a to undo the hunk. (c-c c-c will
navigate the the line in the source code where the hunk was applied.)

Then I used emacs to check the src/*.c.rej files to see if there were any
rejected patches that were essential to the program. In the two files that I
searched, it turned out that they were both essential. I then applied the
changes to the source code.

Next, I removed all of hte untracked files
> git clean -f
After doing git status again, only 6 files remain which is what is predicted by
the specs sheet.

Next, I put a patch into the file quote-3.0-patch.txt
> git diff > quote-3.0-patch.txt

I built the resulting modified version of Diffutils using the following commands
> ./bootstrap
> ./configure
> make
> make check

After running "diff . -" , I verified that Diffutils now does the right thing

Now to do a sanity test, I will compare the source files of the new version with
the old one. I begin by making two new directories
> mkdir diffutils-3.0
> mkdir diffutils-3.0-patch

Then I put the modified source code into the patch directory
> cp src diffutils-3.0-patch

Then I checkedout v3.0 again and then copied its src file into the unpatched
directory
> git checkout v3.0
> cp src diffutils-3.0

Then I run the following command
> diffutils-3.0-patch/diff -pru diffutils-3.0 diffutils-3.0-patch >quote-3.0-tes
t.txt
This creates a txt file where I can compare to the patched version

I ran the following code to compare
> diff quote-3.0-test.txt quote-3.0-patch.txt
The results from this showed many different lines and this I concluded that the
files were not innocuous.
